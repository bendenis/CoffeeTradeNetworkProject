str_c(edge1, edge2)
compute_triplets = function(country, graph, edge1 = "in", edge2 = "in"){
setAin = names(unlist(ego(graph, order = 1, nodes = country, mode = edge1)))[-1]
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin = mclapply(setBin, function(set) set[-str_which(set, country)])
setBinSize = mclapply(setBin, length)
col1 = rep(country, length(unlist(setBin)))
col2 = unlist(map2(setAin, setBinSize, ~ rep(.x, each = .y)))
col3 = unlist(setBin)
triplets = data.frame(X = col1, Y = col2, Z = col3, edge_type = str_c(edge1, edge2))
return(triplets)
}
compute_triplets(country, coffeeG05)
all_triplets = rbind(compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "out"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "out"))
head(all_triplets)
?triangles
n1 = names(unlist(ego(graph, order = 1, nodes = country, mode = "out")))
n2 = names(unlist(ego(graph, order = 1, nodes = country, mode = "in")))
set = n1[n1 %in% n2]
subG = induced_subgraph(coffeeG05, vids = set)
plot(subG, vertex.color = degree(subG, mode = "in"), layout = layout.kamada.kawai(subG),
vertex.label.cex = 0.5, vertex.size = degree(subG, mode = "in"),
edge.arrow.size = 0.2, edge.width = 0.2)
par(mfrow = c(1,1))
n1 = names(unlist(ego(graph, order = 1, nodes = country, mode = "out")))
n2 = names(unlist(ego(graph, order = 1, nodes = country, mode = "in")))
set = n1[n1 %in% n2]
subG = induced_subgraph(coffeeG05, vids = set)
plot(subG, vertex.color = degree(subG, mode = "in"), layout = layout.kamada.kawai(subG),
vertex.label.cex = 0.5, vertex.size = degree(subG, mode = "in"),
edge.arrow.size = 0.2, edge.width = 0.2)
coffeeG10 = read_graph("Data/iGraphs/coffeeG10.gml", format = "gml")
graph = coffeeG10
n1 = names(unlist(ego(graph, order = 1, nodes = country, mode = "out")))
n2 = names(unlist(ego(graph, order = 1, nodes = country, mode = "in")))
set = n1[n1 %in% n2]
subG = induced_subgraph(coffeeG05, vids = set)
plot(subG, vertex.color = degree(subG, mode = "in"), layout = layout.kamada.kawai(subG),
vertex.label.cex = 0.5, vertex.size = degree(subG, mode = "in"),
edge.arrow.size = 0.2, edge.width = 0.2)
coffeeG05 = read_graph("Data/iGraphs/coffeeG15.gml", format = "gml")
subG = induced_subgraph(coffeeG05, vids = set)
plot(subG, vertex.color = degree(subG, mode = "in"), layout = layout.kamada.kawai(subG),
vertex.label.cex = 0.5, vertex.size = degree(subG, mode = "in"),
edge.arrow.size = 0.2, edge.width = 0.2)
n1 = names(unlist(ego(graph, order = 1, nodes = country, mode = "out")))
n2 = names(unlist(ego(graph, order = 1, nodes = country, mode = "in")))
set = n1[n1 %in% n2]
subG = induced_subgraph(coffeeG05, vids = set)
plot(subG, vertex.color = degree(subG, mode = "in"), layout = layout.kamada.kawai(subG),
vertex.label.cex = 0.5, vertex.size = degree(subG, mode = "in"),
edge.arrow.size = 0.2, edge.width = 0.2)
country = "Ethiopia:ETH"
graph = coffeeG05
n1 = names(unlist(ego(graph, order = 1, nodes = country, mode = "out")))
n2 = names(unlist(ego(graph, order = 1, nodes = country, mode = "in")))
set = n1[n1 %in% n2]
subG = induced_subgraph(coffeeG05, vids = set)
plot(subG, vertex.color = degree(subG, mode = "in"), layout = layout.kamada.kawai(subG),
vertex.label.cex = 0.5, vertex.size = degree(subG, mode = "in"),
edge.arrow.size = 0.2, edge.width = 0.2)
g1 = graph.formula("X"-+"Y","Y"-+"Z")
g2 = graph.formula("X"+-"Y","Y"-+"Z")
g3 = graph.formula("X"++"Y","Y"-+"Z")
g4 = graph.formula("X"-+"Y","Y"+-"Z")
g5 = graph.formula("X"-+"Y","Y"++"Z")
g6 = graph.formula("X"++"Y","Y"++"Z")
g7 = graph.formula("X"-+"Y", "Y"-+"Z", "Z"-+"X")
g8 = graph.formula("X"-+"Y", "Y"-+"Z", "Z"+-"X")
g9 = graph.formula("X"-+"Y", "Y"-+"Z", "Z"++"X")
g10 = graph.formula("X"-+"Y", "Y"+-"Z", "Z"++"X")
g11 = graph.formula("X"-+"Y", "Y"++"Z", "Z"+-"X")
g12 = graph.formula("X"-+"Y", "Y"++"Z", "Z"++"X")
g13 = graph.formula("X"++"Y", "Y"++"Z", "Z"++"X")
par(mfrow = c(4,4), cex = 0.5)
lay = layout.circle(g1)
plot(g1,vertex.size = 40, vertex.color = degree(g1, mode = "out") + 1, layout = lay, main = "AAD", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g2,vertex.size = 40, vertex.color = degree(g2, mode = "out") + 1, layout = lay, main = "BAD", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g3,vertex.size = 40, vertex.color = degree(g3, mode = "out") + 1, layout = lay, main = "CAD", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g4,vertex.size = 40, vertex.color = degree(g4, mode = "out") + 1, layout = lay, main = "ABD", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g5,vertex.size = 40, vertex.color = degree(g5, mode = "out") + 1, layout = lay, main = "ACD", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g6,vertex.size = 40, vertex.color = degree(g6, mode = "out") + 1, layout = lay, main = "CCD", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g7,vertex.size = 40, vertex.color = degree(g7, mode = "out") + 1, layout = lay, main = "AAA", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g8,vertex.size = 40, vertex.color = degree(g8, mode = "out") + 1, layout = lay, main = "AAB", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g9,vertex.size = 40, vertex.color = degree(g9, mode = "out") + 1, layout = lay, main = "AAC", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g10,vertex.size = 40, vertex.color = degree(g10, mode = "out") + 1, layout = lay, main = "ABC", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g11,vertex.size = 40, vertex.color = degree(g11, mode = "out") + 1, layout = lay, main = "ACB", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g12,vertex.size = 40, vertex.color = degree(g12, mode = "out") + 1, layout = lay, main = "ACC", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(g13,vertex.size = 40, vertex.color = degree(g13, mode = "out") + 1, layout = lay, main = "CCC", edge.curved = 0.1,
vertex.size = 30, edge.arrow.size = 0.4, vertex.label.cex = 2)
plot(1:10, type = "n", frame.plot = F, xaxt='n', yaxt='n', xlab = "", ylab = "")
legend("bottomright", legend = c("0-outdegree","1-outdegree","2-outdegree"),
col = c(1,2,3), pch = c(20,20,20), pt.cex = 4)
compute_triplets("Netherlands:NLD", coffeeG05, edge1 = "in", edge2 = "out")
compute_triplets("Netherlands:NLD", coffeeG05, edge1 = "in", edge2 = "out") %>% filter(Y == "Ethiopia:ETH")
all_triplets
setAin
setA = names(unlist(ego(graph, order = 1, nodes = country, mode = "all")))[-1]
setA
all_triplets1 = rbind(compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "out"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "out"))
all_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == "Ethiopia:ETH"))
country
all_triplets2
unlist(all_triplets2)
all_triplets2[[1]]
all_triplets2[[2]]
unlist(all_triplets2[[2]])
rbind(all_triplets2 )
length(all_triplets)
setA
all_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
length()
length(all_triplets2)
rbind(all_triplets2)
length(all_triplets2)
rbind(all_triplets2[[1]], all_triplets2[[2]])
trans_triplets = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
all_triplets2 = trans_triplets[[1]]
head(all_triplets2)
all_triplets2 = trans_triplets[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
head(all_triplets2 )
head(all_triplets2)
trans_triplets1 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
trans_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country))
trans_triplets3 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"),Y == country))
trans_triplets4 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"),Y == country))
trans_triplets2
trans_triplets1 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
trans_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country))
trans_triplets3 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"),Y == country))
trans_triplets4 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"),Y == country))
compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in")
filter(compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in"), Y == country)
filter(compute_triplets(setA[[1]], coffeeG05, edge1 = "out", edge2 = "out"), Y == country)
filter(compute_triplets(setA[[1]], coffeeG05, edge1 = "out", edge2 = "in"), Y == country)
compute_triplets(setA[[1]], coffeeG05, edge1 = "out", edge2 = "in")
all_triplets21 = trans_triplets1[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets22 = trans_triplets2[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets23 = trans_triplets3[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets24 = trans_triplets4[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets24
compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in")
compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in") %>% filter(Y == "Ethiopia:ETH")
compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in") %>% filter(Y == "Australia:AUS")
all_triplets21
all_triplets22
setA = names(unlist(ego(graph, order = 1, nodes = country, mode = "all")))[-1]
trans_triplets1 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
trans_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country))
trans_triplets3 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"),Y == country))
trans_triplets4 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"),Y == country))
country = "Egypt:EGY"
setA = names(unlist(ego(graph, order = 1, nodes = country, mode = "all")))[-1]
trans_triplets1 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
trans_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country))
trans_triplets3 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"),Y == country))
trans_triplets4 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"),Y == country))
all_triplets21 = trans_triplets1[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets22 = trans_triplets2[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets23 = trans_triplets3[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets24 = trans_triplets4[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets21
all_triplets22
all_triplets24
all_triplets23
compute_triplets(setA[[1]], coffeeG05, edge1 = "out", edge2 = "in")
compute_triplets(setA[[2]], coffeeG05, edge1 = "out", edge2 = "in")
compute_triplets(setA[[3]], coffeeG05, edge1 = "out", edge2 = "in")
setA[[3]]
?ego
all_triplets21
rbind(all_triplets21, all_triplets22)
rbind(all_triplets21, all_triplets24)
dim(all_triplets22)
dim(all_triplets21)
dim(all_triplets24)
country = "Ethiopia:ETH"
all_triplets1 = rbind(compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "out"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "out"))
dim(all_triplets1)
setA = names(unlist(ego(graph, order = 1, nodes = country, mode = "all")))[-1]
trans_triplets1 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
trans_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country))
trans_triplets3 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"),Y == country))
trans_triplets4 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"),Y == country))
all_triplets21 = trans_triplets1[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets22 = trans_triplets2[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets23 = trans_triplets3[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
all_triplets24 = trans_triplets4[[1]]
for(i in 2:length(trans_triplets)){
all_triplets2 = rbind(all_triplets2, trans_triplets[[i]])
}
lapply(list(all_triplets21,))
lapply(list(all_triplets21,
all_triplets22,
all_triplets23,
all_triplets24) dim
)
lapply(list(all_triplets21, all_triplets22,
all_triplets23, all_triplets24), dim)
all_triplets21
all_triplets = rbind(all_triplets1, all_triplets21)
dim(all_triplets)
tri = triangles(coffeeG05)
tri_df = matrix(names(tri), byrow = TRUE)
dim(tri_df) = c(3,nrow(tri_df)/3)
tri_df = data.frame(t(tri_df))
colnames(tri_df) = c("a","b","c")
DF = tri_df %>% filter(a == "Ethiopia:ETH")
dim(DF)
DF
DF = tri_df %>% filter(a == "Ethiopia:ETH" | b == "Ethiopia:ETH" | c == "Ethiopia:ETH" )
dim(DF)
DF
all_triplets
dim(all_triplets)
dim(DF)
DF[1,]
DF[1,] == DF[1,]
all_triplets[1,]
all_triplets[1,] == DF[,1]
all_triplets[1,1:3] == DF[,1]
all_triplets[1,1:3]
DF[1,]
DF[1,] == all_triplets[1,1:3]
as.character(DF[1,])
str_c(DF[1,])
str(DF)
str(all_triplets)
as.character(all_triplets$X)
all_triplets$X = as.character(all_triplets$X)
all_triplets$Y = as.character(all_triplets$Y)
all_triplets$Z = as.character(all_triplets$Z)
DF$a = as.character(DF$a)
DF$b = as.character(DF$b)
DF$c = as.character(DF$c)
DF[1,]
all_triplets[1,]
all_triplets[1,] == DF[1,]
all_triplets[1,1:3] == DF[1,]
DF[1,]
DF[2,]
DF[3,]
DF[10,]
DF[100,]
DF[300,]
nrow(DF)
nrow(all_triplets)
DF
all_triplets %>% filter(Y == "Ethiopia:ETH")
DF %>% filter(b == "Ethiopia:ETH")
setA
compute_triplets("Spain:ESP", coffeeG05)
compute_triplets("Spain:ESP", coffeeG05) %>% filter(Y == "Ethiopia:ETH")
compute_triplets("Spain:ESP", coffeeG05, edge1 = "all", edge2 = "all") %>% filter(Y == "Ethiopia:ETH")
compute_triplets("Spain:ESP", coffeeG05, edge1 = "out", edge2 = "out") %>% filter(Y == "Ethiopia:ETH")
compute_triplets("Spain:ESP", coffeeG05, edge1 = "out", edge2 = "in") %>% filter(Y == "Ethiopia:ETH")
compute_triplets("Spain:ESP", coffeeG05, edge1 = "in", edge2 = "out") %>% filter(Y == "Ethiopia:ETH")
trans_triplets1 %>% filter(X == "Spain:ESP")
all_triplets21 %>% filter(X == "Spain:ESP")
all_triplets21 %>% filter(Z == "Spain:ESP")
compute_triplets(setA[[1]])
compute_triplets(setA[[1]], coffeeG05)
filter(compute_triplets(setA[[1]], coffeeG05), Y == country)
setA[[1]]
trans_triplets1
trans_triplets2
compute_triplets = function(country, graph, edge1 = "in", edge2 = "in"){
setAin = names(unlist(ego(graph, order = 1, nodes = country, mode = edge1)))[-1]
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin = mclapply(setBin, function(set) set[-str_which(set, country)])
setBinSize = mclapply(setBin, length)
col1 = rep(country, length(unlist(setBin)))
col2 = unlist(map2(setAin, setBinSize, ~ rep(.x, each = .y)))
col3 = unlist(setBin)
triplets = data.frame(X = col1, Y = col2, Z = col3, edge_type = str_c(edge1, edge2))
if(nrow(triplets) > 0){
return(triplets)
}
all_triplets1 = rbind(compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "in", edge2 = "out"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "in"),
compute_triplets(country, coffeeG05, edge1 = "out", edge2 = "out"))
setA = names(unlist(ego(graph, order = 1, nodes = country, mode = "all")))[-1]
setA
trans_triplets1 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"),Y == country))
trans_triplets2 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country))
trans_triplets3 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"),Y == country))
trans_triplets4 = mclapply(setA, function(nb) filter(compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"),Y == country))
compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in")
filter(compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in"), Y == country)
?filter
filter_Y = function(nb){
sbdf = filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country)
if(nrow(sbdf) > 0){
return(sbdf)
}else{
return(NA)
}
trans_triplets1 = mclapply(setA, filter_Y)
filter_Y = function(nb){
sbdf = filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country)
if(nrow(sbdf) > 0){
return(sbdf)
}else{
return(NA)
}
trans_triplets1 = mclapply(setA, filter_Y)
mclapply(setA, filter_Y)
filter_Y(setA[[1]])
filter(compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in"),Y == country)
filter(compute_triplets(setA[[2]], coffeeG05, edge1 = "in", edge2 = "in"),Y == country)
filter(compute_triplets(setA[[3]], coffeeG05, edge1 = "in", edge2 = "in"),Y == country)
filter(compute_triplets(setA[[3]], coffeeG05, edge1 = "in", edge2 = "out"),Y == country)
trans_triplets1
filter_Y = function(nb){
sbdf = compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in")
if(nrow(sbdf) > 0){
sbdf = filter(compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"),Y == country)
return(sbdf)
}else{
return(NA)
}
trans_triplets1 = mclapply(setA, filter_Y)
trans_triplets1
trans_triplets1 = mclapply(setA, function(nb) compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "out"))
trans_triplets2 = mclapply(setA, function(nb) compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"))
trans_triplets3 = mclapply(setA, function(nb) compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "out"))
trans_triplets4 = mclapply(setA, function(nb) compute_triplets(nb, coffeeG05, edge1 = "out", edge2 = "in"))
trans_triplets2
compute_triplets(seta[[1]], coffeeG05, edge1 = "in", edge2 = "in")
compute_triplets(setA[[1]], coffeeG05, edge1 = "in", edge2 = "in")
mclapply(setA, function(nb) compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"))
setA[1]
compute_triplets(setA[1], coffeeG05, edge1 = "in", edge2 = "in")
compute_triplets(setA[2], coffeeG05, edge1 = "in", edge2 = "in")
compute_triplets(setA[3], coffeeG05, edge1 = "in", edge2 = "in")
setA
lapply(setA, function(nb) compute_triplets(nb, coffeeG05, edge1 = "in", edge2 = "in"))
for(i in 1:length(setA)){
print(i)
compute_triplets(setA[1], coffeeG05, edge1 = "in", edge2 = "in")
}
for(i in 1:length(setA)){
print(i)
head(compute_triplets(setA[1], coffeeG05, edge1 = "in", edge2 = "in"))
}
for(i in 1:length(setA)){
print(i)
print(head(compute_triplets(setA[1], coffeeG05, edge1 = "in", edge2 = "in")))
}
for(i in 1:length(setA)){
print(i)
print(head(compute_triplets(setA[i], coffeeG05, edge1 = "in", edge2 = "in")))
}
setA[5]
compute_triplets(setA[5], coffeeG05, edge1 = "in", edge2 = "in")
setAin = names(unlist(ego(graph, order = 1, nodes = setA[5], mode = edge1)))[-1]
setAin
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
setBin = mclapply(setBin, function(set) set[-str_which(set, setA[5])])
setBin
setBinSize = mclapply(setBin, length)
setBinSize
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
mclapply(setBin, function(set) set[-str_which(set, country)])
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
setAin
setA[5]
setBin
setBin[1]
str_which(setBin[1],setA[5])
library(stringr)
str_which(setBin[1],setA[5])
str_which(setBin[2],setA[5])
str_which(setBin[3],setA[5])
str_which(setBin[4],setA[5])
str_which(setBin[5],setA[5])
str_which(setBin[6],setA[5])
str_which(setBin[7],setA[5])
str_which(setBin[8],setA[5])
-str_which(setBin[8],setA[5])
setAin = names(unlist(ego(graph, order = 1, nodes = setA[4], mode = edge1)))[-1]
setA[4]
setAin
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
mclapply(setBin, function(set) set[-str_which(set, country)])
setBin = mclapply(setBin, function(set) set[-str_which(set, country)])
setBin
setBinSize = mclapply(setBin, length)
setBinSize
setAin = names(unlist(ego(graph, order = 1, nodes = setA[5], mode = edge1)))[-1]
setAin
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
mclapply(setBin, function(set) set[-str_which(set, country)])
clapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
mclapply(setBin, function(set) set[-str_which(set, country)])
setBin[6]
?str_which
setBin = mclapply(setBin, function(set) set[-str_which(set, country)])
setBin[9]
is.null(setBin[9])
length(setBin[9])
is_empty(setBin[9])
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin
str_detect(setBin[9],"Peru:PER")
f1 = function(set, node){
if(str_detect(set, node)){
set = set[-str_which(set, node)]
return(set)
}else{
return(set)
}
setBin
mclapply(setBin, f1)
mclapply(setBin, function(x) f1(x, country))
mclapply(setBin, function(x) f1(x, setA[4]))
remove_self_node = function(set, node){
if(str_detect(set, node)){
set = set[-str_which(set, node)]
return(set)
}else{
return(set)
}
compute_triplets = function(country, graph, edge1 = "in", edge2 = "in"){
setAin = names(unlist(ego(graph, order = 1, nodes = country, mode = edge1)))[-1]
setBin = mclapply(setAin, function(nd) names(unlist(ego(graph, order = 1, nodes = nd, mode = edge2)))[-1])
setBin = mclapply(setBin, function(x) remove_self_node(x, country))
setBinSize = mclapply(setBin, length)
col1 = rep(country, length(unlist(setBin)))
col2 = unlist(map2(setAin, setBinSize, ~ rep(.x, each = .y)))
col3 = unlist(setBin)
triplets = data.frame(X = col1, Y = col2, Z = col3, edge_type = str_c(edge1, edge2))
if(nrow(triplets) > 0){
return(triplets)
}
res = rbind(compute_triplets(country, graph, edge1 = "in", edge2 = "in"),
compute_triplets(country, graph, edge1 = "in", edge2 = "out"),
compute_triplets(country, graph, edge1 = "out", edge2 = "in"),
compute_triplets(country, graph, edge1 = "out", edge2 = "out"))
country = "Ethiopia:ETH"
graph = coffeeG05
edge1 = "in"
edge2 = "in"
compute_triplets(country, graph, edge1 = "in", edge2 = "in")
compute_triplets(country, graph, edge1 = "in", edge2 = "out")
compute_triplets(country, graph, edge1 = "out", edge2 = "in")
compute_triplets(country, graph, edge1 = "out", edge2 = "out")
