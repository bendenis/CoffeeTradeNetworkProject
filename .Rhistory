!is.na(TOTAL_BATHS_CALCULATED),
MORTGAGE_AMOUNT > SALE_AMOUNT) %>% mutate(SALE_AMOUNT = log(SALE_AMOUNT),
LIVING_SQUARE_FEET = log(LIVING_SQUARE_FEET),
MORTGAGE_AMOUNT = log(MORTGAGE_AMOUNT),
STORIES_NUMBER = log(STORIES_NUMBER),
BEDROOMS = log(BEDROOMS),
TOTAL_BATHS_CALCULATED = log(TOTAL_BATHS_CALCULATED))
dt = data %>% filter(!is.na(LIVING_SQUARE_FEET),
!is.na(MORTGAGE_AMOUNT),
!is.na(STORIES_NUMBER),
!is.na(TOTAL_BATHS_CALCULATED),
MORTGAGE_AMOUNT < SALE_AMOUNT) %>% mutate(SALE_AMOUNT = log(SALE_AMOUNT),
LIVING_SQUARE_FEET = log(LIVING_SQUARE_FEET),
MORTGAGE_AMOUNT = log(MORTGAGE_AMOUNT),
STORIES_NUMBER = log(STORIES_NUMBER),
BEDROOMS = log(BEDROOMS),
TOTAL_BATHS_CALCULATED = log(TOTAL_BATHS_CALCULATED))
nrow(dt)/nrow(taxDT)
summary(m0)
m0 = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR, dt)
summary(m0)
m1a = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED, dt)
m1b = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED +
CONDITION + CONSTRUCTION_TYPE + EXTERIOR_WALLS + FOUNDATION +
FLOOR + ROOF_TYPE, dt)
summary(m1a)
summary(m1b)
anova(m0,m1a,m1b)
anova(m0,m1a,m1b,m2,m3)
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
m3 = gam(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4) +
CONDITION + CONSTRUCTION_TYPE + EXTERIOR_WALLS + FOUNDATION +
FLOOR + ROOF_TYPE, data = dt)
anova(m0,m1a,m1b,m2,m3)
summary(m1a)
summary(m1a)$r.squared
summary(m1a)$r.squared - summary(m0)$r.squared
summary(m1a)$r.squared - summary(m0)$r.squared *100
summary(m1a)$r.squared - summary(m0)$r.squared
0.003010173*100
summary(m1b)
summary(m1b)$r.squared
summary(m1b)$r.squared - summary(m0)$r.squared
summary(m1b)$r.squared - summary(m1a)$r.squared
0.001811604*100
summary(m1b)$r.squared
plot(dt$SALE_AMOUNT ~ dt$BEDROOMS)
summary(m1a)
plot(dt$SALE_AMOUNT ~ dt$YEAR_BUILT)
m1a = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT, dt)
summary(m1a)
m1a = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED, dt)
summary(m1a)
1 - m2$deviance/184816
par(mfrow = c(3,3))
plot(m2, se = TRUE, col = "green")
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
par(mfrow = c(3,3))
plot(m2, se = TRUE, col = "green")
library(gam)
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
1 - m2$deviance/184816
plot(m2, se = TRUE, col = "green")
plot(m2)
summary(m2)
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
summary(m2)
dt = data %>% filter(!is.na(LIVING_SQUARE_FEET),
!is.na(MORTGAGE_AMOUNT),
!is.na(STORIES_NUMBER),
!is.na(TOTAL_BATHS_CALCULATED),
MORTGAGE_AMOUNT < SALE_AMOUNT) %>% mutate(SALE_AMOUNT = log(SALE_AMOUNT),
LIVING_SQUARE_FEET = log(LIVING_SQUARE_FEET),
MORTGAGE_AMOUNT = log(MORTGAGE_AMOUNT),
STORIES_NUMBER = log(STORIES_NUMBER),
BEDROOMS = log(BEDROOMS),
TOTAL_BATHS_CALCULATED = log(TOTAL_BATHS_CALCULATED))
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
summary(m2)
summary(m3)
summary(m4)
m2
library(tidyverse)
library(gam)
data = read.csv("deed_tax.csv")
data = data[,-1]
dt = data %>% filter(!is.na(LIVING_SQUARE_FEET),
!is.na(MORTGAGE_AMOUNT),
!is.na(STORIES_NUMBER),
!is.na(TOTAL_BATHS_CALCULATED),
MORTGAGE_AMOUNT < SALE_AMOUNT) %>% mutate(SALE_AMOUNT = log(SALE_AMOUNT),
LIVING_SQUARE_FEET = log(LIVING_SQUARE_FEET),
MORTGAGE_AMOUNT = log(MORTGAGE_AMOUNT),
STORIES_NUMBER = log(STORIES_NUMBER),
BEDROOMS = log(BEDROOMS),
TOTAL_BATHS_CALCULATED = log(TOTAL_BATHS_CALCULATED))
m0 = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR, dt)
summary(m0)
m1a = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED, dt)
m1b = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED +
CONDITION + CONSTRUCTION_TYPE + EXTERIOR_WALLS + FOUNDATION +
FLOOR + ROOF_TYPE, dt)
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
m2
summary(m2)
summary(m1)
summary(m1a)
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT + PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
m2
library(tidyverse)
library(gam)
data = read.csv("deed_tax.csv")
data = data[,-1]
dt = data %>% filter(!is.na(LIVING_SQUARE_FEET),
!is.na(MORTGAGE_AMOUNT),
!is.na(STORIES_NUMBER),
!is.na(TOTAL_BATHS_CALCULATED),
MORTGAGE_AMOUNT < SALE_AMOUNT) %>% mutate(SALE_AMOUNT = log(SALE_AMOUNT),
LIVING_SQUARE_FEET = log(LIVING_SQUARE_FEET),
MORTGAGE_AMOUNT = log(MORTGAGE_AMOUNT),
STORIES_NUMBER = log(STORIES_NUMBER),
BEDROOMS = log(BEDROOMS),
TOTAL_BATHS_CALCULATED = log(TOTAL_BATHS_CALCULATED))
m2 = gam(SALE_AMOUNT ~  MORTGAGE_AMOUNT + PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4), data = dt)
1 - m2$deviance/184816
m2
summary(m2)
par(mfrow = c(3,3))
plot(m2, se = TRUE, col = "green")
summary(m1b)
m1b = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED +
CONDITION + CONSTRUCTION_TYPE + EXTERIOR_WALLS + FOUNDATION +
FLOOR + ROOF_TYPE, dt)
summary(m1b)
coefs(m1b)
m1b$coefficients
plot(m1b$coefficients)
sort(m1b$coefficients)
tail(sort(m1b$coefficients),10)
summary(m1b)
head(sort(m1b$coefficients),10)
1 - m2$deviance/184816
m3 = gam(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
s(SALE_DATE_YEAR, df = 4) + s(LIVING_SQUARE_FEET, df = 4) +
s(STORIES_NUMBER, df = 4) + s(BEDROOMS, df = 4) + s(YEAR_BUILT, df = 4) +
s(TOTAL_BATHS_CALCULATED, df = 4) +
CONDITION + CONSTRUCTION_TYPE + EXTERIOR_WALLS + FOUNDATION +
FLOOR + ROOF_TYPE, data = dt)
1 - m3$deviance/184816
1 - m2$deviance/184816
head(sort(m2$coefficients),10)
tail(sort(m2$coefficients),10)
tail(sort(m2$coefficients),20)
m2$coefficients
tail(sort(m3$coefficients),20)
tail(sort(m3$coefficients),10)
tail(sort(m1b$coefficients),10)
anova(m1a,m2)
m1a = lm(SALE_AMOUNT ~ MORTGAGE_AMOUNT +
PROPERTY_LEVEL_LONGITUDE*PROPERTY_LEVEL_LATITUDE +
SALE_DATE_YEAR + LIVING_SQUARE_FEET +
STORIES_NUMBER + BEDROOMS + YEAR_BUILT + TOTAL_BATHS_CALCULATED, dt)
anova(m1a,m2)
summary(m1a)
1 - m2$deviance/184816
0.9321021 - 0.8892
0.0429021*100
1 - m3$deviance/184816
(0.9331989 - 0.9321021)*100
0.8910 - 0.8892
0.4163204 - 0.3928454
exp(0.023475)
plot(m3, se = TRUE, col = "blue")
par(mfrow = c(3,3))
plot(m3, se = TRUE, col = "blue")
library(igraph)
library(stringr)
library(purrr)
library(GGally)
library(dplyr)
coffee_trade_2010 = read.csv("Data/Decorated/coffeeG10measures.csv")
coffeeG10 = read_graph("Data/iGraphs/coffeeG10.gml", format = "gml")
simM = similarity(coffeeG10, vids = V(coffeeG10), mode = "all", method = "dice")
hcl1 = hclust(as.dist(simM))
clusts = cutree(hcl1, k = 4)
set_vertex_attr(coffeeG10, "cluster", index = V(coffeeG10), clusts)
lay3 = layout.davidson.harel(coffeeG10)
plot(coffeeG10, vertex.color = clusts, layout = lay3,
vertex.label.cex = 0.5,
edge.arrow.size = 0.2, edge.width = 0.2)
coffee_trade_2010$clust = clusts
coffee_trade_2010 %>% filter(clust == 2) %>% summary()
setwd("~/Box Sync/UM Fall 2017/SI 608/CoffeeTradeNetworkProject")
library(igraph)
library(stringr)
library(purrr)
library(GGally)
library(dplyr)
coffee_trade_2010 = read.csv("Data/Decorated/coffeeG10measures.csv")
coffeeG10 = read_graph("Data/iGraphs/coffeeG10.gml", format = "gml")
simM = similarity(coffeeG10, vids = V(coffeeG10), mode = "all", method = "dice")
hcl1 = hclust(as.dist(simM))
clusts = cutree(hcl1, k = 4)
set_vertex_attr(coffeeG10, "cluster", index = V(coffeeG10), clusts)
lay3 = layout.davidson.harel(coffeeG10)
plot(coffeeG10, vertex.color = clusts, layout = lay3,
vertex.label.cex = 0.5,
edge.arrow.size = 0.2, edge.width = 0.2)
coffee_trade_2010$clust = clusts
coffee_trade_2010 %>% filter(clust == 2) %>% summary()
data(World)
coffee_trade_2010$iso_a3 = str_replace(str_extract(coffee_trade_2010$country,":[A-Z]*"),":","")
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
world_map = tm_shape(World) + tm_borders() + tm_fill("indegree_centrality")
tmap_leaflet(world_map)
library(tmap)
data(World)
coffee_trade_2010$iso_a3 = str_replace(str_extract(coffee_trade_2010$country,":[A-Z]*"),":","")
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
world_map = tm_shape(World) + tm_borders() + tm_fill("indegree_centrality")
tmap_leaflet(world_map)
data(World)
coffee_trade_2010$iso_a3 = str_replace(str_extract(coffee_trade_2010$country,":[A-Z]*"),":","")
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
library(plyr)
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
world_map = tm_shape(World) + tm_borders() + tm_fill("indegree_centrality")
tmap_leaflet(world_map)
world_map = tm_shape(World) + tm_borders() + tm_fill('iso_a3')
tmap_leaflet(world_map)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
?similarity
?hclust
hcl1 = hclust(as.dist(simM), method = "ward.D")
clusts = cutree(hcl1, k = 4)
coffee_trade_2010$clust = clusts
coffee_trade_2010 %>% filter(clust == 2) %>% summary()
data(World)
coffee_trade_2010$iso_a3 = str_replace(str_extract(coffee_trade_2010$country,":[A-Z]*"),":","")
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
clusts = cutree(hcl1, k = 10)
coffee_trade_2010$clust = clusts
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
coffee_trade_2010$iso_a3 = str_replace(str_extract(coffee_trade_2010$country,":[A-Z]*"),":","")
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
simM = similarity(coffeeG10, vids = V(coffeeG10), mode = "all", method = "dice")
hcl1 = hclust(as.dist(simM), method = "ward.D")
clusts = cutree(hcl1, k = 10)
set_vertex_attr(coffeeG10, "cluster", index = V(coffeeG10), clusts)
coffee_trade_2010$clust = clusts
coffee_trade_2010 %>% filter(clust == 2) %>% summary()
coffee_trade_2010$iso_a3 = str_replace(str_extract(coffee_trade_2010$country,":[A-Z]*"),":","")
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
clusts = cutree(hcl1, k = 5)
set_vertex_attr(coffeeG10, "cluster", index = V(coffeeG10), clusts)
plot(coffeeG10, vertex.color = clusts, layout = lay3,
vertex.label.cex = 0.5,
edge.arrow.size = 0.2, edge.width = 0.2)
coffee_trade_2010$clust = clusts
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
plot(hcl1)
par(mfrow = c(1,1))
plot(hcl1)
clusts = cutree(hcl1, k = 6)
clusts
coffee_trade_2010$clust = clusts
World@data = join(World@data,coffee_trade_2010, by = 'iso_a3')
World$clust = as.factor(World$clust)
world_map = tm_shape(World) + tm_borders() + tm_fill("clust")
tmap_leaflet(world_map)
unique(World$clust)
World@data
View(World@data)
world_map = tm_shape(World) + tm_borders() + tm_fill("betweenness_centrality")
tmap_leaflet(world_map)
world_map
library(igraph)
library(stringr)
library(ggplot2)
library(purrr)
library(GGally)
library(dplyr)
coffee_trade_2010 = read.csv("Data/Decorated/coffeeG10measures.csv")
coffeeG10 = read_graph("Data/iGraphs/coffeeG10.gml", format = "gml")
coffee_trade_2010 = read.csv("Data/Decorated/coffeeG10measures.csv")
coffeeG10 = read_graph("Data/iGraphs/coffeeG10.gml", format = "gml")
E(coffeeG10)[1]
adjM = as.matrix(get.adjacency(coffeeG10))
vM = adjM
dim(vM) = c(42849,1)
partner = rep(names(adjM[,1]),207)
df = data.frame(export = vM[,1], importer = rep(names(adjM[,1]),207), exporter = rep(names(adjM[,1]),each = 207))
make_diffs = function(mydata, var){
vec = vector(mode = "numeric", length = nrow(mydata)^2)
for(i in 1:nrow(mydata)){
diffs = unlist(lapply(mydata[var], function(x) mydata[i,var] - x))
a = 207*(i-1) + 1
b = 207*i
vec[a:b] = diffs
}
return(vec)
}
closeness_centrality_diffs = make_diffs(coffee_trade_2010, 'closeness_centrality')
df$closeness_centrality_diffs = closeness_centrality_diffs
indegree_centrality_diffs = make_diffs(coffee_trade_2010, 'indegree_centrality')
df$indegree_centrality_diffs = indegree_centrality_diffs
outdegree_centrality_diffs = make_diffs(coffee_trade_2010, 'outdegree_centrality')
df$outdegree_centrality_diffs= outdegree_centrality_diffs
betweenness_centrality_diffs = make_diffs(coffee_trade_2010, 'betweenness_centrality')
df$betweenness_centrality_diffs = betweenness_centrality_diffs
df$export = as.factor(df$export)
df %>% select(export, closeness_centrality_diffs,
indegree_centrality_diffs, outdegree_centrality_diffs,
betweenness_centrality_diffs) %>%
ggpairs(mapping = aes(col = export, alpha = 0.3))
?svm
nrow(df)
make_diffs = function(mydata, var){
vec = vector(mode = "numeric", length = nrow(mydata)^2)
for(i in 1:nrow(mydata)){
diffs = unlist(lapply(mydata[var], function(x) mydata[i,var] - x))
a = 207*(i-1) + 1
b = 207*i
vec[a:b] = diffs
}
return(vec)
}
make_diffs = function(mydata, var){
vec = vector(mode = "numeric", length = nrow(mydata)^2)
for(i in 1:nrow(mydata)){
diffs = unlist(lapply(mydata[var], function(x) mydata[i,var] - x))
a = 207*(i-1) + 1
b = 207*i
vec[a:b] = diffs
}
return(vec)
}
make_diffs(World@data, "gdp_md_est")
gdp_diffs = make_diffs(World@data, "gdp_md_est")
df$gdp_diffs = gdp_diffs
V(coffeeG10)
World$iso_a3
length(V(coffeeG10))
library(e1071)
?svm
names(dt)
names(df)
library(kernlab)
?ksvm
svm1 = ksvm(export ~ ., data = df, kernel = "rbfdot")
pred = predict(svm1)
table(pred, df$export)
head(df)
svm1 = ksvm(export ~ closeness_centrality_diffs +
indegree_centrality_diffs +
outdegree_centrality_diffs +
betweenness_centrality_diffs, data = df, kernel = "rbfdot")
pred = predict(svm1)
table(pred, df$export)
head(df)
plot(World$gdp_md_est, World$indegree_centrality)
plot(log(World$gdp_md_est), World$indegree_centrality)
plot(log(World$gdp_md_est), log(World$indegree_centrality))
plot(log(World$gdp_md_est), log(World$outdegree_centrality))
df
head(df)
str_extract(df$exporter,":[A-Z]*"),":","")
str_replace(str_extract(df$exporter,":[A-Z]*"),":","")
df$iso_a3 = str_replace(str_extract(df$exporter,":[A-Z]*"),":","")
df$iso_a3 %in% World$iso_a3
df = df %>% filter(df$iso_a3 %in% World$iso_a3)
nrow(df)
length(gdp_diffs)
wdf = World@data %>% filter(World$iso_a3 %in% df$iso_a3)
World$iso_a3
World$iso_a3 %in% df$iso_a3
wdf = World@data %>% filter(World$iso_a3 %in% df$iso_a3)
wdf
wdf = World@data
class(wdf)
wdf$iso_a3 %in% df$iso_a3
wdf = wdf %>% filter(wdf$iso_a3 %in% df$iso_a3)
wdf = wdf %>% filter(iso_a3 %in% df$iso_a3)
wdf$iso_a3 = as.character(wdf$iso_a3)
wdf = wdf %>% filter(iso_a3 %in% df$iso_a3)
wdf$iso_a3
wdf$iso_a3 %in% df$iso_a3
wdf = wdf[wdf$iso_a3 %in% df$iso_a3,]
names(wdf)
gdp_diffs = make_diffs(wdf, "gdp_md_est")
length(gdp_diffs)
nrow(df)
df$gdp_diffs = gdp_diffs
plot(df$export, df$gdp_diffs)
df %>% select(export, closeness_centrality_diffs,
indegree_centrality_diffs, outdegree_centrality_diffs,
betweenness_centrality_diffs, gdp_diffs) %>%
ggpairs(mapping = aes(col = export, alpha = 0.3))
plot(df$export, log(df$gdp_diffs))
plot(df$export, log(df$gdp_diffs + 1))
names(wdf)
pop_diffs = make_diffs(wdf, "pop_est")
df$pop_est = pop_diffs
plot(df$export, log(df$pop_est + 1))
clust_diffs = make_diffs(wdf, "clust")
df$clust_diffs = clust_diffs
plot(df$export, df$clust_diffs)
df$clust_diffs
names(wdf)
mean_terms_diffs = make_diffs(wdf, "mean_terms")
df$mean_terms_diffs= mean_terms_diffs
df$mean_terms_diffs
plot(df$export, df$mean_terms_diffs)
df %>% select(export, closeness_centrality_diffs,
indegree_centrality_diffs, outdegree_centrality_diffs,
betweenness_centrality_diffs, gdp_diffs, mean_terms_diffs) %>%
ggpairs(mapping = aes(col = export, alpha = 0.3))
head(df)
head(coffee_trade_2010)
?ksvm
svm1 = ksvm(export ~ gdp_diffs + mean_terms_diffs + pop_est + outdegree_centrality_diffs, data = df,
kernel = "polydot")
summary(df)
svm1 = ksvm(export ~ gdp_diffs + pop_est + outdegree_centrality_diffs, data = df,
kernel = "polydot")
table(pred(svm1))
table(predict(svm1))
svm1 = ksvm(export ~ gdp_diffs + pop_est + outdegree_centrality_diffs, data = df,
kernel = "rbfdot")
table(predict(svm1))
svm1 = ksvm(export ~ gdp_diffs + pop_est + outdegree_centrality_diffs + betweenness_centrality_diffs, data = df,
kernel = "rbfdot")
table(predict(svm1))
